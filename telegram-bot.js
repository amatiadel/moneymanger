const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// Bot configuration
const BOT_TOKEN = '8432533152:AAH7siLTo-nTsna7TiBYM9ZMiIjgngD0bFc';
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3001';

// Create bot instance
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// User states for conversation flow
const userStates = new Map();

// Categories from your budget data
const categories = {
    expense: [
        '–∏–ø–æ—Ç–µ–∫–∞', '–ø—Ä–æ–¥—É–∫—Ç—ã', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', '–¥–æ—Å—Ç–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã',
        '–∫–æ–º–º—É–Ω–∞–ª–∫–∞', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Å–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å', '–∫—É—Ä–∫—É—Ä', '–º–∞—à–∏–Ω–∞', '–∑–∞–ø—Ä–∞–≤–∫–∞',
        '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã', '–∞–ø—Ç–µ–∫–∞', '–≤—Ä–∞—á–∏', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –±–∞–ª–æ–≤—Å—Ç–≤–∞',
        '–ø–æ–¥–∞—Ä–∫–∏', '–æ–¥–µ–∂–¥–∞', '–ø–æ–¥–ø–∏—Å–∫–∏', '–±—ã—Ç–æ–≤–æ–µ –¥–ª—è –¥–æ–º–∞', '–∫–æ—Å–º–µ—Ç–∏–∫–∞', '–ó—Å–¥',
        '–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç', '–∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞', '–∫–ª–∞–¥–æ–≤–∫–∞', '—É—á–µ–±–Ω—ã–π –∫—Ä–µ–¥–∏—Ç', '–ö—Ä–∞—Å–æ—Ç–∞'
    ],
    income: [
        '–ó–ü –ê–¥–µ–ª—å', '–ó–ü –ö—Ä–∏—Å—Ç–∏–Ω–∞', 'Tax refund', '—Ä–æ–¥–∏—Ç–µ–ª–∏ –ö—Ä–∏—Å—Ç–∏–Ω—ã', 'Other',
        '–¥–æ—Å—Ç–∞–≤–∫–∞', '–ø–æ–¥–∞—Ä–∫–∏', 'ps5', '–∫–∞–ø'
    ]
};

// Helper function to create inline keyboard from categories
function createCategoryKeyboard(categoryList, type) {
    const keyboard = [];
    const buttonsPerRow = 2;
    
    for (let i = 0; i < categoryList.length; i += buttonsPerRow) {
        const row = [];
        for (let j = 0; j < buttonsPerRow && i + j < categoryList.length; j++) {
            const category = categoryList[i + j];
            row.push({
                text: category,
                callback_data: `${type}_${category}`
            });
        }
        keyboard.push(row);
    }
    
    return {
        reply_markup: {
            inline_keyboard: keyboard
        }
    };
}

// Helper function to save data to API
async function saveToAPI(type, data) {
    try {
        // Convert type to plural form for API endpoints
        const endpoint = type === 'expense' ? 'expenses' : 'income';
        const response = await axios.post(`${API_BASE_URL}/api/${endpoint}`, data);
        return response.data;
    } catch (error) {
        console.error(`Error saving ${type}:`, error.message);
        throw error;
    }
}

// Helper function to format currency
function formatCurrency(amount) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB'
    }).format(amount);
}

// Start command handler
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = `‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–µ–ª—å –∏ –ö—Ä–∏—Å—Ç–∏–Ω–∞! ‚ú®

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤–º–µ—Å—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç, —á—Ç–æ–±—ã –º–µ—á—Ç–∞ –æ –Ω–æ–≤–æ–º –¥–æ–º–µ üè°, –º–∞—à–∏–Ω–µ üöó –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö ‚úàÔ∏è —Å—Ç–∞–ª–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é.

–í–º–µ—Å—Ç–µ –≤—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å —Å –ª—é–±–æ–π —Ü–µ–ª—å—é! üíñ`;

    const keyboard = {
        reply_markup: {
            inline_keyboard: [[
                {
                    text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å',
                    callback_data: 'add_entry'
                }
            ]]
        }
    };

    bot.sendMessage(chatId, welcomeMessage, keyboard);
});

// Add command handler
bot.onText(/\/add/, (msg) => {
    const chatId = msg.chat.id;
    const message = `üè°üöó‚úàÔ∏è –ß—Ç–æ –∑–∞–ø–∏—à–µ–º –≤ –Ω–∞—à –æ–±—â–∏–π –±—é–¥–∂–µ—Ç, –ê–¥–µ–ª—å –∏ –ö—Ä–∏—Å—Ç–∏–Ω–∞? üíñ`;

    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üõí –†–∞—Å—Ö–æ–¥—ã',
                        callback_data: 'type_expense'
                    },
                    {
                        text: 'üí∞ –î–æ—Ö–æ–¥—ã',
                        callback_data: 'type_income'
                    }
                ]
            ]
        }
    };

    bot.sendMessage(chatId, message, keyboard);
});

// Skip command handler
bot.onText(/\/skip/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    const userState = userStates.get(userId);
    if (userState && userState.step === 'description') {
        userState.description = '';
        userState.step = 'save';
        userStates.set(userId, userState);
        
        // Process the entry
        processEntry(chatId, userId, userState);
    }
});

// Callback query handler
bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const chatId = message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    try {
        if (data === 'add_entry') {
            const messageText = `üè°üöó‚úàÔ∏è –ß—Ç–æ –∑–∞–ø–∏—à–µ–º –≤ –Ω–∞—à –æ–±—â–∏–π –±—é–¥–∂–µ—Ç, –ê–¥–µ–ª—å –∏ –ö—Ä–∏—Å—Ç–∏–Ω–∞? üíñ`;

            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üõí –†–∞—Å—Ö–æ–¥—ã',
                                callback_data: 'type_expense'
                            },
                            {
                                text: 'üí∞ –î–æ—Ö–æ–¥—ã',
                                callback_data: 'type_income'
                            }
                        ]
                    ]
                }
            };

            await bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: message.message_id,
                ...keyboard
            });
        }
        else if (data.startsWith('type_')) {
            const type = data.split('_')[1];
            const userState = {
                type: type,
                step: 'category',
                userId: userId
            };
            userStates.set(userId, userState);

            const categoryList = categories[type];
            const keyboard = createCategoryKeyboard(categoryList, type);

            await bot.editMessageText(`üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è ${type === 'expense' ? '—Ä–∞—Å—Ö–æ–¥–∞' : '–¥–æ—Ö–æ–¥–∞'}:`, {
                chat_id: chatId,
                message_id: message.message_id,
                ...keyboard
            });
        }
        else if (data.startsWith('expense_') || data.startsWith('income_')) {
            const [type, category] = data.split('_', 2);
            const userState = userStates.get(userId);
            
            if (userState) {
                userState.category = category;
                userState.step = 'amount';
                userStates.set(userId, userState);

                await bot.editMessageText(`üí∞ –°–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—à–µ–º?`, {
                    chat_id: chatId,
                    message_id: message.message_id
                });
            }
        }

        // Answer the callback query
        await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
        console.error('Error handling callback query:', error);
        
        // If it's a message edit error, send a new message instead
        if (error.code === 'ETELEGRAM' && error.response && error.response.body && 
            error.response.body.description && error.response.body.description.includes('message to edit not found')) {
            try {
                const messageText = `üè°üöó‚úàÔ∏è –ß—Ç–æ –∑–∞–ø–∏—à–µ–º –≤ –Ω–∞—à –æ–±—â–∏–π –±—é–¥–∂–µ—Ç, –ê–¥–µ–ª—å –∏ –ö—Ä–∏—Å—Ç–∏–Ω–∞? üíñ`;
                const keyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üõí –†–∞—Å—Ö–æ–¥—ã',
                                    callback_data: 'type_expense'
                                },
                                {
                                    text: 'üí∞ –î–æ—Ö–æ–¥—ã',
                                    callback_data: 'type_income'
                                }
                            ]
                        ]
                    }
                };
                await bot.sendMessage(chatId, messageText, keyboard);
            } catch (sendError) {
                console.error('Error sending new message:', sendError);
            }
        }
        
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' });
    }
});

// Message handler for amount and description
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    // Skip if it's a command
    if (text.startsWith('/')) {
        return;
    }

    const userState = userStates.get(userId);
    if (!userState) {
        return;
    }

    try {
        if (userState.step === 'amount') {
            const amount = parseFloat(text.replace(',', '.'));
            
            if (isNaN(amount) || amount <= 0) {
                await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1000.50)');
                return;
            }

            userState.amount = amount;
            userState.step = 'description';
            userStates.set(userId, userState);

            await bot.sendMessage(chatId, `üí¨ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ú®`);
        }
        else if (userState.step === 'description') {
            userState.description = text;
            userState.step = 'save';
            userStates.set(userId, userState);

            // Process the entry
            await processEntry(chatId, userId, userState);
        }
    } catch (error) {
        console.error('Error handling message:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// Process and save entry
async function processEntry(chatId, userId, userState) {
    try {
        const entryData = {
            date: new Date().toISOString().split('T')[0],
            category: userState.category,
            description: userState.description || '',
            amount: userState.amount
        };

        await saveToAPI(userState.type, entryData);

        // Clear user state
        userStates.delete(userId);

        // Send success message
        const isIncome = userState.type === 'income';
        const emoji = isIncome ? 'üí∞' : 'üõí';
        const typeText = isIncome ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥';
        const motivationText = isIncome 
            ? 'üåü –ö–∞–∂–¥—ã–π –¥–æ—Ö–æ–¥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –º–µ—á—Ç–µ –æ –¥–æ–º–µ üè†, –º–∞—à–∏–Ω–µ üöô –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö üåç'
            : '‚ö° –î–∞–∂–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–º–æ–≥–∞—é—Ç –¥–µ—Ä–∂–∞—Ç—å –±—é–¥–∂–µ—Ç –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Ü–µ–ª—è–º –≤–º–µ—Å—Ç–µ üíï';

        const successMessage = `${emoji} ${typeText} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!

üíµ –°—É–º–º–∞: ${formatCurrency(userState.amount)}
üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${userState.category}
üñäÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: ${userState.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}

${motivationText}

üå∏ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /add`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ',
                        callback_data: 'add_entry'
                    }
                ]]
            }
        };

        await bot.sendMessage(chatId, successMessage, keyboard);
    } catch (error) {
        console.error('Error processing entry:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        
        // Clear user state on error
        userStates.delete(userId);
    }
}

// Error handling
bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

bot.on('error', (error) => {
    console.error('Bot error:', error);
});

console.log('ü§ñ Telegram Bot is running...');
console.log('üì± Bot Token:', BOT_TOKEN);
console.log('üåê API Base URL:', API_BASE_URL);
